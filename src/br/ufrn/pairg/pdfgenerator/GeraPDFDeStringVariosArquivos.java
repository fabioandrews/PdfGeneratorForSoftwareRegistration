package br.ufrn.pairg.pdfgenerator;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Date;
import java.util.LinkedList;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

public class GeraPDFDeStringVariosArquivos {

	 private static String FILE = "c:/temp/FirstPdf.pdf";
	  private static Font catFont = new Font(Font.FontFamily.COURIER, 18,
	      Font.BOLD);
	  private static Font redFont = new Font(Font.FontFamily.COURIER, 12,
	      Font.NORMAL, BaseColor.RED);
	  private static Font subFont = new Font(Font.FontFamily.COURIER, 16,
	      Font.BOLD);
	  private static Font smallBold = new Font(Font.FontFamily.COURIER, 12,
	      Font.BOLD);
	  private static Font smallFont = new Font(Font.FontFamily.COURIER, 9,
		      Font.NORMAL);
	  
	  /**
	   * Gera um único PDF de vários arquivos lidos
	   * @param textosLidos lista com texto dos arquivos lidos. ele tem de ter o msm tamanho de nomesDosArquivosLidos
	   * @param nomesDosArquivosLidos
	   * @param arquivoPdfOutput arquivo PDF de output
	   * @return
	   */
	public static boolean gerarPDFDeStringVariosArquivos(LinkedList<String> textosLidos, LinkedList<String> nomesDosArquivosLidos, File arquivoPdfOutput)
	{
		 try {
			  FileOutputStream fos = new FileOutputStream(arquivoPdfOutput);
			  Document document = new Document();
		      PdfWriter.getInstance(document, fos);
		      document.open();
		      addMetaData(document);
		      addTitlePage(document);
		      for(int i = 0; i < textosLidos.size(); i++)
		      {
		    	  String umTextoLido = textosLidos.get(i);
		    	  String umNomeArquivoLido = nomesDosArquivosLidos.get(i);
		    	  String textoLido2 = umTextoLido.replaceAll("\\t", "        ");
			      
			      addContent(document, textoLido2, umNomeArquivoLido);
		      }
		      document.close();
		     
		     
		      return true;
		    } catch (Exception e) {
		      e.printStackTrace();
		      return false;
		    }
	}
	
	 // iText allows to add metadata to the PDF which can be viewed in your Adobe
	  // Reader
	  // under File -> Properties
	  private static void addMetaData(Document document) {
	    document.addTitle("My first project to register");
	    document.addSubject("Using iText");
	    document.addKeywords("Java, PDF, iText");
	    document.addAuthor("Lars Vogel");
	    document.addCreator("Lars Vogel");
	  }

	  private static void addTitlePage(Document document)
	      throws DocumentException {
	    Paragraph preface = new Paragraph();
	    // We add one empty line
	    addEmptyLine(preface, 1);
	    // Lets write a big header
	    preface.add(new Paragraph("Nome Do Projeto", redFont));

	    addEmptyLine(preface, 1);
	    // Will create: Report generated by: _name, _date
	    preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
	        smallBold));
	    addEmptyLine(preface, 3);
	    

	    document.add(preface);
	  }

	  private static void addContent(Document document, String textoArquivoLido, String nomeDoArquivoLido) throws DocumentException {
		// Start a new page
		document.newPage();
	    Anchor anchor = new Anchor(nomeDoArquivoLido, redFont);
	    anchor.setName(nomeDoArquivoLido);

	    // Second parameter is the number of the chapter
	    Chapter catPart = new Chapter(new Paragraph(anchor), 1);

	    Paragraph p = new Paragraph(textoArquivoLido, smallFont);
	    //p.setTabSettings(new TabSettings(56f));
	    catPart.add(p);
	    // now add all this to the document
	    document.add(catPart);


	  }
	  
	  private static void addEmptyLine(Paragraph paragraph, int number) {
		    for (int i = 0; i < number; i++) {
		      paragraph.add(new Paragraph(" "));
		    }
		  }
	  
	/**
	 * @param args
	 */
	public static void main(String[] args) 
	{
		 try
		  {
			  File arquivoPdfGerar = new File(FILE);
		      /*PrintStream ps = new PrintStream(fileOutputStream);
			  System.setOut(ps);*/
			  LinkedList<String> nomesArquivosLidos = new LinkedList<String>();
			  LinkedList<String> textosArquivosLidos = new LinkedList<String>();
			  String url = "C:\\Users\\FábioPhillip\\Documents\\GitHub\\sumosensei\\src\\armazenamentointerno\\ConcreteDAOArmazenaInternamenteDadosDePartidasRealizadas.java";
			  String nomeProjeto = "sumosensei";
			  String arquivoLido = LeitorArquivoTexto.lerArquivoQualquerDeTexto(url);
			  String nomeArquivoLido = LeitorArquivoTexto.pegarNomeArquivo(url, nomeProjeto);
			  nomesArquivosLidos.add(nomeArquivoLido);
			  textosArquivosLidos.add(arquivoLido);
			  url = "C:\\Users\\FábioPhillip\\Documents\\GitHub\\sumosensei\\res\\layout\\activity_cadastro.xml";
			  nomeProjeto = "sumosensei";
			  arquivoLido = LeitorArquivoTexto.lerArquivoQualquerDeTexto(url);
			  nomeArquivoLido = LeitorArquivoTexto.pegarNomeArquivo(url, nomeProjeto);
			  nomesArquivosLidos.add(nomeArquivoLido);
			  textosArquivosLidos.add(arquivoLido);
			  
			  gerarPDFDeStringVariosArquivos(textosArquivosLidos, nomesArquivosLidos,arquivoPdfGerar);
		  }
		  catch(Exception e)
		  {
			  e.printStackTrace();
		  }

	}

}
